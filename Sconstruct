# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.com
# ********************************************************************
import os
import math
import platform 
plt = platform.system()

# arch support x86 arm
# arch='arm'
arch='x86' 

DefaultEnvironment(tools=[])
env = Environment(ENV = {}, tools=['gcc'])

env = Environment(
        CC = '/opt/local/bin/i386-elf-gcc',
        LD='/opt/local/bin/i386-elf-ld',
        CXX='/opt/local/bin/i386-elf-g++',
        AR= '/opt/local/bin/i386-elf-ar',
        STRIP="/opt/local/bin/i386-elf-strip",
        RANLIB='/opt/local/bin/i386-elf-ranlib',
        OBJCOPY='/opt/local/bin/i386-elf-objcopy',
        CFLAGS='-DX86 -march=i486 -I. -I./include -Ilibs/include -g -nostdlib -nostdinc -fno-builtin -m32 -c -std=c99 -std=gnu99 -w',
        #PATH= os.environ['PATH'],
        LIBPATH=['.','../arch/','../driver','../libs/'],
        LINKFLAGS='-nostdlib -nostartfiles -e start  -g ',
        OBJCOPYFLAGS='-S -g',
        ARCH=arch
        )

if plt=='Linux':
    env['CC']='/usr/bin/gcc'
    env['LD']='/usr/bin/ld'
    env['CXX']='/usr/bin/g++'
    env['AR']='/usr/bin/ar'
    env['STRIP']='/usr/bin/strip'
    env['RANLIB']='/usr/bin/ranlib'
    env['OBJCOPY']='/usr/bin/objcopy'
    pass
elif plt=='Darwin':
    if arch =='arm':
        env['AS']='/opt/local/bin/arm-none-eabi-as'
        env['CC']='/opt/local/bin/arm-none-eabi-gcc'
        env['LD']='/opt/local/bin/arm-none-eabi-ld'
        env['CXX']='/opt/local/bin/arm-none-eabi-g++'
        env['AR']='/opt/local/bin/arm-none-eabi-ar'
        env['STRIP']='/opt/local/bin/arm-none-eabi-strip'
        env['RANLIB']='/opt/local/bin/arm-none-eabi-ranlib'
        env['OBJCOPY']='/opt/local/bin/arm-none-eabi-objcopy'
        env['CFLAGS']='-mcpu=cortex-a7  -DARM -I. -I./include -Ilibs/include -g -nostdlib -nostdinc -fno-builtin -c -std=c99 -std=gnu99 -w'
        pass
else:
    print('no support ^_^!')



def generate_bin(source, target, env, for_signature):
    return '$OBJCOPY %s %s %s'%(env['OBJCOPYFLAGS'],source[0], target[0])
    
env.Append(BUILDERS={
    'Objcopy': Builder(
               generator=generate_bin,
               suffix='',)})

def get_kernel_size(env,target,source):
    file_name=str(source[0])
    file_out=str(target[0])
    if os.path.exists(file_name):
        size=os.stat(file_name).st_size
        env['KERNEL_SIZE'] = str(size)
        env['KERNEL_BLOCK_SIZE'] = str(int(math.ceil(size/1024.0)))
        print('kernel size:',env.get('KERNEL_SIZE'))
    else :
        print('file %s not exist'%(file_name))
    return ''

def generate_kernel_size(env,target,source):
    file_name=str(source[0])
    file_out=str(target[0])
    get_kernel_size(env,target,source)
    kernel_header=file_out.upper().rsplit('/',1)[-1].replace('.','_')
    f = open(file_out, 'w')
    content="""#ifndef %s
#define %s
#define KERNEL_BLOCK_SIZE %s
#define KERNEL_SIZE %s
#endif
"""%(kernel_header,
    kernel_header,
    env.get('KERNEL_BLOCK_SIZE'),
    env.get('KERNEL_SIZE'))
    f.write(content)
    f.close()
    return ''

env.Append(BUILDERS={
    'GenerateKernelSize': Builder(
               action=generate_kernel_size
               ),
    'KernelSize': get_kernel_size
               })

Export('env')

SConscript(dirs=['libs/libalgorithm'], exports='env')
SConscript(dirs=['arch'], exports='env')
SConscript(dirs=['kernel'], exports='env')
SConscript(dirs=['libs/libkernel'], exports='env')
SConscript(dirs=['libs/libc'], exports='env')
SConscript(dirs=['drivers'], exports='env')
kernel=SConscript(dirs=['app'], exports='env')


boot=SConscript(dirs=['boot/'+arch], exports='env')
Depends(boot, kernel)

image=SConscript(dirs=['image'], exports='env')
Depends(image, kernel)
